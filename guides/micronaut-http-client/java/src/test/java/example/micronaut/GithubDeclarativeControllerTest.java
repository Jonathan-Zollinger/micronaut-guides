package example.micronaut;

import io.micronaut.http.HttpRequest;
import io.micronaut.http.client.StreamingHttpClient;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.test.extensions.junit5.annotation.MicronautTest;
import jakarta.inject.Inject;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Flux;

import java.util.regex.Pattern;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertTrue;

@MicronautTest // <1>
class GithubDeclarativeControllerTest {

    @Inject
    @Client("/")
    StreamingHttpClient streamingClient; // <2>

    private static Pattern MICRONAUT_RELEASE = Pattern.compile("[Micronaut|Micronaut Framework] [0-9].[0-9].[0-9]([0-9])?( (RC|M)[0-9])?");

    @Test
    void verifyGithubReleasesCanBeFetchedWithCompileTimeAutoGeneratedAtClient() {
        //when:
        HttpRequest<Object> request = HttpRequest.GET("/github/releases");

        Stream<GithubRelease> githubReleases = Flux.from(streamingClient.jsonStream(request, GithubRelease.class)).toStream(); // <3>

        //then:
        assertTrue(githubReleases
                .map(GithubRelease::getName)
                .allMatch(name -> MICRONAUT_RELEASE.matcher(name)
                        .find()));
    }
}
