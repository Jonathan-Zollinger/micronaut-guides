package example.micronaut

import io.micronaut.http.HttpRequest
import io.micronaut.http.client.StreamingHttpClient
import io.micronaut.http.client.annotation.Client
import io.micronaut.test.extensions.spock.annotation.MicronautTest
import jakarta.inject.Inject
import reactor.core.publisher.Flux
import spock.lang.Shared
import spock.lang.Specification

import java.util.regex.Pattern
import java.util.stream.Stream

@MicronautTest // <1>
class GithubDeclarativeControllerSpec extends Specification {

    @Inject
    @Client("/")
    StreamingHttpClient streamingClient // <2>

    @Shared
    Pattern MICRONAUT_RELEASE = Pattern.compile("[Micronaut|Micronaut Framework] [0-9].[0-9].[0-9]([0-9])?( (RC|M)[0-9])?");

    void 'verify github releases can be fetched with compile-time autogenerated @Client'() {
        when:
        HttpRequest request = HttpRequest.GET('/github/releases')

        Stream<GithubRelease> githubReleases = Flux.from(streamingClient.jsonStream(request, GithubRelease)).toStream() // <3>

        then:
        githubReleases
                .map(GithubRelease::getName)
                .allMatch(name -> MICRONAUT_RELEASE.matcher(name).find())
    }
}
